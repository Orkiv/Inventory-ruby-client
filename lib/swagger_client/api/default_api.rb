=begin
#InventoryAPI

#Orkiv Inventory API client 

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require "uri"

module SwaggerClient
  class DefaultApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # 
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<InventoryGroup>]
    def all_get(opts = {})
      data, _status_code, _headers = all_get_with_http_info(opts)
      return data
    end

    # 
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<InventoryGroup>, Fixnum, Hash)>] Array<InventoryGroup> data, response status code and response headers
    def all_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.all_get ..."
      end
      # resource path
      local_var_path = "/all/".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APIKey', 'AccountID']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<InventoryGroup>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#all_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param id Id of category to remove
    # @param [Hash] opts the optional parameters
    # @return [Response]
    def categories_delete(id, opts = {})
      data, _status_code, _headers = categories_delete_with_http_info(id, opts)
      return data
    end

    # 
    # 
    # @param id Id of category to remove
    # @param [Hash] opts the optional parameters
    # @return [Array<(Response, Fixnum, Hash)>] Response data, response status code and response headers
    def categories_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.categories_delete ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.categories_delete" if id.nil?
      # resource path
      local_var_path = "/categories/".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'id'] = id

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APIKey', 'AccountID']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Response')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#categories_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Dictionary] :query Category to query against system
    # @return [Array<Category>]
    def categories_post(opts = {})
      data, _status_code, _headers = categories_post_with_http_info(opts)
      return data
    end

    # 
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Dictionary] :query Category to query against system
    # @return [Array<(Array<Category>, Fixnum, Hash)>] Array<Category> data, response status code and response headers
    def categories_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.categories_post ..."
      end
      # resource path
      local_var_path = "/categories/".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'query'])
      auth_names = ['APIKey', 'AccountID']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Category>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#categories_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # If no ID is specified a new category will be created!
    # @param id category id to update.
    # @param category New category information.
    # @param [Hash] opts the optional parameters
    # @return [Category]
    def categories_put(id, category, opts = {})
      data, _status_code, _headers = categories_put_with_http_info(id, category, opts)
      return data
    end

    # 
    # If no ID is specified a new category will be created!
    # @param id category id to update.
    # @param category New category information.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Category, Fixnum, Hash)>] Category data, response status code and response headers
    def categories_put_with_http_info(id, category, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.categories_put ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.categories_put" if id.nil?
      # verify the required parameter 'category' is set
      fail ArgumentError, "Missing the required parameter 'category' when calling DefaultApi.categories_put" if category.nil?
      # resource path
      local_var_path = "/categories/".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'id'] = id

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(category)
      auth_names = ['APIKey', 'AccountID']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Category')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#categories_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param item Item to create.
    # @param [Hash] opts the optional parameters
    # @return [Item]
    def item_add_post(item, opts = {})
      data, _status_code, _headers = item_add_post_with_http_info(item, opts)
      return data
    end

    # 
    # 
    # @param item Item to create.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Item, Fixnum, Hash)>] Item data, response status code and response headers
    def item_add_post_with_http_info(item, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.item_add_post ..."
      end
      # verify the required parameter 'item' is set
      fail ArgumentError, "Missing the required parameter 'item' when calling DefaultApi.item_add_post" if item.nil?
      # resource path
      local_var_path = "/item/add/".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(item)
      auth_names = ['APIKey', 'AccountID']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Item')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#item_add_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param items Items to create.
    # @param [Hash] opts the optional parameters
    # @return [Response]
    def item_addbulk_post(items, opts = {})
      data, _status_code, _headers = item_addbulk_post_with_http_info(items, opts)
      return data
    end

    # 
    # 
    # @param items Items to create.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Response, Fixnum, Hash)>] Response data, response status code and response headers
    def item_addbulk_post_with_http_info(items, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.item_addbulk_post ..."
      end
      # verify the required parameter 'items' is set
      fail ArgumentError, "Missing the required parameter 'items' when calling DefaultApi.item_addbulk_post" if items.nil?
      # resource path
      local_var_path = "/item/addbulk/".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(items)
      auth_names = ['APIKey', 'AccountID']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Response')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#item_addbulk_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param id item id to remove
    # @param [Hash] opts the optional parameters
    # @return [Response]
    def item_delete(id, opts = {})
      data, _status_code, _headers = item_delete_with_http_info(id, opts)
      return data
    end

    # 
    # 
    # @param id item id to remove
    # @param [Hash] opts the optional parameters
    # @return [Array<(Response, Fixnum, Hash)>] Response data, response status code and response headers
    def item_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.item_delete ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.item_delete" if id.nil?
      # resource path
      local_var_path = "/item/".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'id'] = id

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APIKey', 'AccountID']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Response')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#item_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param id item id to update.
    # @param item New item information.
    # @param [Hash] opts the optional parameters
    # @return [Response]
    def item_put(id, item, opts = {})
      data, _status_code, _headers = item_put_with_http_info(id, item, opts)
      return data
    end

    # 
    # 
    # @param id item id to update.
    # @param item New item information.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Response, Fixnum, Hash)>] Response data, response status code and response headers
    def item_put_with_http_info(id, item, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.item_put ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.item_put" if id.nil?
      # verify the required parameter 'item' is set
      fail ArgumentError, "Missing the required parameter 'item' when calling DefaultApi.item_put" if item.nil?
      # resource path
      local_var_path = "/item/".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'id'] = id

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(item)
      auth_names = ['APIKey', 'AccountID']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Response')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#item_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Dictionary] :query Item to query against system.
    # @return [Float]
    def items_count_post(opts = {})
      data, _status_code, _headers = items_count_post_with_http_info(opts)
      return data
    end

    # 
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Dictionary] :query Item to query against system.
    # @return [Array<(Float, Fixnum, Hash)>] Float data, response status code and response headers
    def items_count_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.items_count_post ..."
      end
      # resource path
      local_var_path = "/items/count/".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'query'])
      auth_names = ['APIKey', 'AccountID']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Float')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#items_count_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Dictionary] :query Item to query against system.
    # @return [Array<Item>]
    def items_post(opts = {})
      data, _status_code, _headers = items_post_with_http_info(opts)
      return data
    end

    # 
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Dictionary] :query Item to query against system.
    # @return [Array<(Array<Item>, Fixnum, Hash)>] Array<Item> data, response status code and response headers
    def items_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.items_post ..."
      end
      # resource path
      local_var_path = "/items/".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'query'])
      auth_names = ['APIKey', 'AccountID']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Item>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#items_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Dictionary] :query Item to query against system.
    # @return [Array<Dictionary>]
    def itemsallfields_post(opts = {})
      data, _status_code, _headers = itemsallfields_post_with_http_info(opts)
      return data
    end

    # 
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Dictionary] :query Item to query against system.
    # @return [Array<(Array<Dictionary>, Fixnum, Hash)>] Array<Dictionary> data, response status code and response headers
    def itemsallfields_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.itemsallfields_post ..."
      end
      # resource path
      local_var_path = "/items/?allfields".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'query'])
      auth_names = ['APIKey', 'AccountID']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Dictionary>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#itemsallfields_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Dictionary] :query Order to query against system.
    # @return [Array<Order>]
    def orders_post(opts = {})
      data, _status_code, _headers = orders_post_with_http_info(opts)
      return data
    end

    # 
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Dictionary] :query Order to query against system.
    # @return [Array<(Array<Order>, Fixnum, Hash)>] Array<Order> data, response status code and response headers
    def orders_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.orders_post ..."
      end
      # resource path
      local_var_path = "/orders/".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'query'])
      auth_names = ['APIKey', 'AccountID']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Order>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#orders_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :page Current page index.
    # @option opts [String] :categoryid Get items under specified category id.
    # @option opts [String] :sort Comma delimited Sort string. ie ; +ordprice. Please use number based fields only
    # @option opts [String] :search Performs a regex pattern match against the items within your account
    # @option opts [Float] :minprice Min price in hundreds.
    # @option opts [Float] :maxprice Max price in hudreds.
    # @option opts [Dictionary] :query Custom parameters to query against system.
    # @return [Array<Item>]
    def query_post(opts = {})
      data, _status_code, _headers = query_post_with_http_info(opts)
      return data
    end

    # 
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :page Current page index.
    # @option opts [String] :categoryid Get items under specified category id.
    # @option opts [String] :sort Comma delimited Sort string. ie ; +ordprice. Please use number based fields only
    # @option opts [String] :search Performs a regex pattern match against the items within your account
    # @option opts [Float] :minprice Min price in hundreds.
    # @option opts [Float] :maxprice Max price in hudreds.
    # @option opts [Dictionary] :query Custom parameters to query against system.
    # @return [Array<(Array<Item>, Fixnum, Hash)>] Array<Item> data, response status code and response headers
    def query_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.query_post ..."
      end
      # resource path
      local_var_path = "/query/".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'categoryid'] = opts[:'categoryid'] if !opts[:'categoryid'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'search'] = opts[:'search'] if !opts[:'search'].nil?
      query_params[:'minprice'] = opts[:'minprice'] if !opts[:'minprice'].nil?
      query_params[:'maxprice'] = opts[:'maxprice'] if !opts[:'maxprice'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'query'])
      auth_names = ['APIKey', 'AccountID']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Item>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#query_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :page Current page index.
    # @option opts [String] :categoryid Get items under specified category id.
    # @option opts [String] :sort Comma delimited Sort string. ie ; +ordprice. Please use number based fields only
    # @option opts [String] :search Performs a regex pattern match against the items within your account
    # @option opts [Float] :minprice Min price in hundreds.
    # @option opts [Float] :maxprice Max price in hudreds.
    # @option opts [Dictionary] :query Custom parameters to query against system.
    # @return [Array<Dictionary>]
    def queryallfields_post(opts = {})
      data, _status_code, _headers = queryallfields_post_with_http_info(opts)
      return data
    end

    # 
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :page Current page index.
    # @option opts [String] :categoryid Get items under specified category id.
    # @option opts [String] :sort Comma delimited Sort string. ie ; +ordprice. Please use number based fields only
    # @option opts [String] :search Performs a regex pattern match against the items within your account
    # @option opts [Float] :minprice Min price in hundreds.
    # @option opts [Float] :maxprice Max price in hudreds.
    # @option opts [Dictionary] :query Custom parameters to query against system.
    # @return [Array<(Array<Dictionary>, Fixnum, Hash)>] Array<Dictionary> data, response status code and response headers
    def queryallfields_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.queryallfields_post ..."
      end
      # resource path
      local_var_path = "/query/?allfields".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'categoryid'] = opts[:'categoryid'] if !opts[:'categoryid'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'search'] = opts[:'search'] if !opts[:'search'].nil?
      query_params[:'minprice'] = opts[:'minprice'] if !opts[:'minprice'].nil?
      query_params[:'maxprice'] = opts[:'maxprice'] if !opts[:'maxprice'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'query'])
      auth_names = ['APIKey', 'AccountID']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Dictionary>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#queryallfields_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param id ID of the service to update
    # @param [Hash] opts the optional parameters
    # @return [Response]
    def services_delete(id, opts = {})
      data, _status_code, _headers = services_delete_with_http_info(id, opts)
      return data
    end

    # 
    # 
    # @param id ID of the service to update
    # @param [Hash] opts the optional parameters
    # @return [Array<(Response, Fixnum, Hash)>] Response data, response status code and response headers
    def services_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.services_delete ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.services_delete" if id.nil?
      # resource path
      local_var_path = "/services/".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'id'] = id

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APIKey', 'AccountID']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Response')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#services_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<Service>]
    def services_get(opts = {})
      data, _status_code, _headers = services_get_with_http_info(opts)
      return data
    end

    # 
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Service>, Fixnum, Hash)>] Array<Service> data, response status code and response headers
    def services_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.services_get ..."
      end
      # resource path
      local_var_path = "/services/".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APIKey', 'AccountID']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Service>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#services_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param service Service to create.
    # @param [Hash] opts the optional parameters
    # @return [Service]
    def services_post(service, opts = {})
      data, _status_code, _headers = services_post_with_http_info(service, opts)
      return data
    end

    # 
    # 
    # @param service Service to create.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Service, Fixnum, Hash)>] Service data, response status code and response headers
    def services_post_with_http_info(service, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.services_post ..."
      end
      # verify the required parameter 'service' is set
      fail ArgumentError, "Missing the required parameter 'service' when calling DefaultApi.services_post" if service.nil?
      # resource path
      local_var_path = "/services/".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(service)
      auth_names = ['APIKey', 'AccountID']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Service')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#services_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param id ID of the service to update
    # @param service New service data to set.
    # @param [Hash] opts the optional parameters
    # @return [Response]
    def services_put(id, service, opts = {})
      data, _status_code, _headers = services_put_with_http_info(id, service, opts)
      return data
    end

    # 
    # 
    # @param id ID of the service to update
    # @param service New service data to set.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Response, Fixnum, Hash)>] Response data, response status code and response headers
    def services_put_with_http_info(id, service, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.services_put ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.services_put" if id.nil?
      # verify the required parameter 'service' is set
      fail ArgumentError, "Missing the required parameter 'service' when calling DefaultApi.services_put" if service.nil?
      # resource path
      local_var_path = "/services/".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'id'] = id

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(service)
      auth_names = ['APIKey', 'AccountID']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Response')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#services_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id Will delete event attached to this serviceid
    # @return [Response]
    def write_delete(opts = {})
      data, _status_code, _headers = write_delete_with_http_info(opts)
      return data
    end

    # 
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id Will delete event attached to this serviceid
    # @return [Array<(Response, Fixnum, Hash)>] Response data, response status code and response headers
    def write_delete_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.write_delete ..."
      end
      # resource path
      local_var_path = "/write/".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APIKey', 'AccountID']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Response')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#write_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Will ovveride the current event of the specified service.
    # @param event_request Event to upload
    # @param [Hash] opts the optional parameters
    # @return [Response]
    def write_post(event_request, opts = {})
      data, _status_code, _headers = write_post_with_http_info(event_request, opts)
      return data
    end

    # 
    # Will ovveride the current event of the specified service.
    # @param event_request Event to upload
    # @param [Hash] opts the optional parameters
    # @return [Array<(Response, Fixnum, Hash)>] Response data, response status code and response headers
    def write_post_with_http_info(event_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.write_post ..."
      end
      # verify the required parameter 'event_request' is set
      fail ArgumentError, "Missing the required parameter 'event_request' when calling DefaultApi.write_post" if event_request.nil?
      # resource path
      local_var_path = "/write/".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(event_request)
      auth_names = ['APIKey', 'AccountID']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Response')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#write_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
